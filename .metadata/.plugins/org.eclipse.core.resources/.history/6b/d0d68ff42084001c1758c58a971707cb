package com.zensar.training.db;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import com.zensar.training.bean.Employee;
import com.zensar.training.bean.Gender;

public class EmployeeJdbcImpl implements EmployeeDAO {

	@Override
	public boolean addEmployee(Connection connection, Employee employee) throws Exception {
		PreparedStatement statement = connection.prepareStatement(INSERT_QRY);
		statement.setString(1, employee.getName());

		LocalDate localDate = employee.getHiredDate();
		Date dateOfJoining = DateConversion.convertToSQLDate(localDate);
		statement.setDate(2, dateOfJoining);
		statement.setString(3, employee.getGrade() + "");
		statement.setDouble(4, employee.getBasicSalary());
		statement.setString(5, employee.getGender().toString());

		int count = statement.executeUpdate();
		if (count > 0)
			return true;

		return false;
	}

	@Override
	public boolean updateEmployee(Connection connection, Employee employee) throws Exception {
		PreparedStatement statement = connection.prepareStatement(UPDATE_QRY);
		statement.setString(1, employee.getName());

		LocalDate localDate = employee.getHiredDate();
		Date dateOfJoining = DateConversion.convertToSQLDate(localDate);
		statement.setDate(2, dateOfJoining);
		statement.setString(3, employee.getGrade() + "");
		statement.setDouble(4, employee.getBasicSalary());
		statement.setString(5, employee.getGender().toString());
		statement.setInt(6, employee.getId());

		int count = statement.executeUpdate();
		if (count > 0)
			return true;
		return false;
	}

	@Override
	public boolean deleteEmployee(Connection connection, Employee employee) throws Exception {
		PreparedStatement statement = connection.prepareStatement(DELETE_QRY);

		statement.setInt(1, employee.getId());

		int count = statement.executeUpdate();
		if (count > 0)
			return true;
		return false;
	}

	@Override
	public Employee findEmployee(Connection connection, int empId) throws Exception {
		PreparedStatement statement = connection.prepareStatement(FIND_QRY);
		statement.setInt(1, empId);

		ResultSet rs = statement.executeQuery();
		if (rs.next()) {
			Employee emp = new Employee();
			emp.setId(rs.getInt(1));
			emp.setName(rs.getString(2));

			Date date = rs.getDate(3);
			LocalDate doj = DateConversion.convertToLocalDate(date);

			emp.setHiredDate(doj);
			emp.setGrade(rs.getString(4).charAt(0));
			emp.setBasicSalary(rs.getDouble(5));
			char gender = rs.getString(6).charAt(0);
			if (gender == 'M')
				emp.setGender(Gender.MALE);
			if (gender == 'F')
				emp.setGender(Gender.FEMALE);
			return emp;
		}

		return null;
	}

	@Override
	public List<Employee> findAllEmployees(Connection connection) {
		List<Employee> employees=new ArrayList<>();
		
		return employees;
	}

}
